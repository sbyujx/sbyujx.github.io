---
layout: post
title:  "字符集和编码"
date:   2017-06-29 09:18:55 +0800
categories: c#
---
字符集和编码
==============
## ASCII编码
ASCII(American Standard Code for Information Interchange)：美国信息交换标准代码
* ASCII字符集(7位)
![ASCII字符集(7位)](http://images.cnblogs.com/cnblogs_com/skynet/201105/2011050311372042.png)
* ASCII扩展字符集(8位)/EASCII
![ASCII扩展字符集(8位)](http://images.cnblogs.com/cnblogs_com/skynet/201105/201105031137219627.png)
---------------------
## 国标编码(GBXXXX)
* GB2312(-80)
  > 把那些127号之后的奇异符号们（即EASCII）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的"全角"字符，而原来在127号以下的那些就叫"半角"字符了。</br>
  GB2312-80一共收录了6763个汉字。

  ![GB2312](http://images.cnblogs.com/cnblogs_com/skynet/201105/201105031137227086.png)
* GBK
> 厂商微软利用GB2312-80未使用的编码空间，收录GB13000.1-93全部字符制定了GBK编码。根据微软资料，GBK是对GB2312-80的扩展，也就是CP936字码表 (Code Page 936)的扩展（之前CP936和GB2312-80一模一样），最早实现于Windows 95简体中文版。虽然GBK收录GB13000.1-93的全部字符，但编码方式并不相同。GBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为"技术规范指导性文件"。原始GB13000一直未被业界采用，后续国家标准GB18030技术上兼容GBK而非GB13000。

* GB18030(-2005)
> 中华人民共和国现时最新的内码字集，是GB18030-2000的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB13000及Unicode的全部统一汉字，共收录汉字70244个。</br>
>1. 与UTF-8相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。
>2. 编码空间庞大，最多可定义161万个字符。
>3. 支持中国国内少数民族的文字，不需要动用造字区。
>4. 汉字收录范围包含繁体汉字以及日韩汉字。
------------------------------------
## BIG5编码
> 普及于港台澳等繁体字区域，非国家标准，只是业界标准。</br>
采用双八码存储方法，以两个字节来安放一个字。第一个字节称为"高位字节"，第二个字节称为"低位字节"。"高位字节"使用了0x81-0xFE，"低位字节"使用了0x40-0x7E，及0xA1-0xFE。

-------------------------------------
## Unicode字符集
Unicode编码系统为表达任意语言的任意字符而设计。它使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)。Unicode 是基于通用字符集（Universal Character Set）的标准来发展，并且同时也以书本的形式对外发表。

* UTF-32编码
>使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，称为UTF-32。UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。

* UTF-16编码
>实际上大多数人不会用到超过前65535个以外的字符。因此，就有了另外一种Unicode编码方式，叫做UTF-16(因为16位 = 2字节)。UTF-16将0–65535范围内的字符编码成2个字节，如果真的需要表达那些很少使用的"星芒层(astral plane)"内超过这65535范围的Unicode字符，则需要使用一些诡异的技巧来实现。</br>
<b>UTF-16编码方法：</b>
>1. 如果字符编码U小于0x10000，也就是十进制的0到65535之内，则直接使用两字节表示；
>2. 如果字符编码U大于0x10000，由于UNICODE编码范围最大为0x10FFFF，从0x10000到0x10FFFF之间 共有0xFFFFF个编码，也就是需要20个bit就可以标示这些编码。用U'表示从0-0xFFFFF之间的值，将其前 10 bit作为高位和16 bit的数值0xD800进行 逻辑or 操作，将后10 bit作为低位和0xDC00做 逻辑or 操作，这样组成的 4个byte就构成了U的编码。  

>这意味着字符U+4E2D在UTF-16编码方式下可能被保存为4E 2D或者2D 4E，这取决于该系统使用的是大尾端(big-endian)还是小尾端(little-endian)。  
为了解决这个问题，多字节的Unicode编码方式定义了一个"字节顺序标记(Byte Order Mark)"，它是一个特殊的非打印字符，你可以把它包含在文档的开头来指示你所使用的字节顺序。对于UTF-16，字节顺序标记是U+FEFF。如果收到一个以字节FF FE开头的UTF-16编码的文档，你就能确定它的字节顺序是单向的(one way)的了；如果它以FE FF开头，则可以确定字节顺序反向了。

* UTF-8编码
>一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。  
UTF-8使用一至四个字节为每个字符编码。  
<b>UTF-8编码方法：</b>
>1. 128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F。
>2. 带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。
>3. 其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。
>4. 其他极少使用的Unicode辅助平面的字符使用四字节编码。  


<b>由位操作的天性使然，使用UTF-8不再存在字节顺序的问题了。一份以utf-8编码的文档在不同的计算机之间是一样的比特流。</br>


编码|表示（十六进制）
----|----
UTF-8|EF BB BF
UTF-16（大端序）|FE FF
UTF-16（小端序）|FF FE
UTF-32（大端序）|00 00 FE FF
UTF-32（小端序）|FF FE 00 00
